Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EC2keypair:
        Description: Provides the name of the EC2 key pair
        Type: String
 
    EnvType: 
        Description: Environment type.
        Type: String
    
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
 
    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    #Start DB settings
    DBMasterUsername:
        Description: Allows one to set the DB master user name for the DB elsewhere
        Type: String
        Default: MyName

    DBMasterUserPassword:
        Description: Allows one to set the DB master user name password for the DB elsewhere
        Type: String
        Default: MyPassword

    DBName:
        Description: name of the database to use on the database server
        Type: String
        Default: app

    DBPort:
        Description: port to connect to the database server on
        Type: String
   
    DBHost:
        Description: host to connect to, ip or dns entry
        Type: String
        Default: localhost

    ListenHost:
        Description: listener configuration for the application, 0.0.0.0 for all IP, or specify ip to listen on
        Type: String
        Default: localhost

    ListenPort:
        Description: port to bind on the local server
        Type: String
        Default: 3000

    #End DB settings
    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: String
       


Mappings:

    # These are the latest ECS optimized AMIs as of Feb 2018:
    #
    #   amzn-ami-2017.09.h-amazon-ecs-optimized
    #   ECS agent:    1.17.1
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.17.1-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-b86a5ddd
        us-east-1:
            AMI: ami-a7a242da
        us-west-2:
            AMI: ami-92e06fea
        us-west-1:
            AMI: ami-9ad4dcfa
        eu-west-3:
            AMI: ami-698b3d14
        eu-west-2:
            AMI: ami-f4e20693
        eu-west-1:
            AMI: ami-0693ed7f
        eu-central-1:
            AMI: ami-0799fa68
        ap-northeast-2:
            AMI: ami-a5dd70cb
        ap-northeast-1:
            AMI: ami-68ef940e
        ap-southeast-2:
            AMI: ami-ee884f8c
        ap-southeast-1:
            AMI: ami-0a622c76
        ca-central-1:
            AMI: ami-5ac94e3e
        ap-south-1:
            AMI: ami-2e461a41
        sa-east-1:
            AMI: ami-d44008b8	

Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterSize
            DesiredCapacity: !Ref ClusterSize
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions
                WaitOnResourceSignals: true

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            SecurityGroups:
                - !Ref SecurityGroup
            IamInstanceProfile: !Ref ECSInstanceProfile
            KeyName: !Ref EC2keypair
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
                    yum install -y aws-cfn-bootstrap hibagent
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --configsets MyconfigSets
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
                    /usr/bin/enable-ec2-spot-hibernation

        Metadata:
            AWS::CloudFormation::Init:
            #The cfn-init helper script processes these configuration sections in the following order: 
            # packages, groups, users, sources, files, commands, and then services.
            #If you require a different order, separate your sections into different config keys, 
            # and then use a configset that specifies the order in which the config keys should be processed. 
                #config:
                    configSets:
                        MyconfigSets:
                          - ecsstartup
                          - vibrato1
                          - vibrato2

                    ############ start of ecsstartup
                    ecsstartup:
                      packages:
                          yum:
                              awslogs: []
                               
                      commands:
                          01_add_instance_to_cluster:
                              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                          10_add_vibrato_user:
                              command: /usr/sbin/useradd vibrato

                      files:
                          "/etc/cfn/cfn-hup.conf":
                              mode: 000400
                              owner: root
                              group: root
                              content: !Sub |
                                  [main]
                                  stack=${AWS::StackId}
                                  region=${AWS::Region}

                          "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                              content: !Sub |
                                  [cfn-auto-reloader-hook]
                                  triggers=post.update
                                  path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                          "/etc/awslogs/awscli.conf":
                              content: !Sub |
                                  [plugins]
                                  cwlogs = cwlogs
                                  [default]
                                  region = ${AWS::Region}

                          "/etc/awslogs/awslogs.conf":
                              content: !Sub |
                                  [general]
                                  state_file = /var/lib/awslogs/agent-state

                                  [/var/log/dmesg]
                                  file = /var/log/dmesg
                                  log_group_name = ${ECSCluster}-/var/log/dmesg
                                  log_stream_name = ${ECSCluster}

                                  [/var/log/messages]
                                  file = /var/log/messages
                                  log_group_name = ${ECSCluster}-/var/log/messages
                                  log_stream_name = ${ECSCluster}
                                  datetime_format = %b %d %H:%M:%S

                                  [/var/log/docker]
                                  file = /var/log/docker
                                  log_group_name = ${ECSCluster}-/var/log/docker
                                  log_stream_name = ${ECSCluster}
                                  datetime_format = %Y-%m-%dT%H:%M:%S.%f

                                  [/var/log/ecs/ecs-init.log]
                                  file = /var/log/ecs/ecs-init.log.*
                                  log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                                  log_stream_name = ${ECSCluster}
                                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                                  [/var/log/ecs/ecs-agent.log]
                                  file = /var/log/ecs/ecs-agent.log.*
                                  log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                                  log_stream_name = ${ECSCluster}
                                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                                  [/var/log/ecs/audit.log]
                                  file = /var/log/ecs/audit.log.*
                                  log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                                  log_stream_name = ${ECSCluster}
                                  datetime_format = %Y-%m-%dT%H:%M:%SZ

                      services:
                          sysvinit:
                              cfn-hup:
                                  enabled: true
                                  ensureRunning: true
                                  files:
                                      - /etc/cfn/cfn-hup.conf
                                      - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                              awslogs:
                                  enabled: true
                                  ensureRunning: true
                                  files:
                                      - /etc/awslogs/awslogs.conf
                                      - /etc/awslogs/awscli.conf
                    ############ end of ecsstartup 

                    ############ start of vibrato1                  
                    vibrato1:
                       packages:
                             yum:
                                  wget: []                    
                                  unzip: []
                                  bind-utils: []

                       files:  
                          "/home/vibrato/appinstallation.sh":
                          #To be run later to download the TechTestApp
                              mode: "000700"
                              owner: vibrato
                              group: vibrato
                              content: !Sub |
                                  #!/bin/bash -ex
                                  curl -s https://api.github.com/repos/vibrato/TechTestApp/releases/latest | grep "browser_download_url" | grep linux64 | cut -d '"' -f 4 | wget -qi -

                          "/home/vibrato/appenv":
                          #To be added later to the /home/vibrato/.bashrc file for the TechTestApp
                              mode: "000700"
                              owner: vibrato
                              group: vibrato
                              content: !Sub |
                                  export VTT_DBUSER=${DBMasterUsername}
                                  export VTT_DBPASSWORD=${DBMasterUserPassword}
                                  export VTT_DBNAME=${DBName}
                                  export VTT_DBPORT=${DBPort}
                                  export VTT_DBHOST=${DBHost}
                                  export VTT_LISTENHOST=${ListenHost}
                          "/home/vibrato/conf.toml":
                          #To be copied later to the /home/vibrato/distr/conf.toml file for the TechTestApp
                              mode: "000400"
                              owner: root
                              group: root
                              content: !Sub |
                                  "DbUser" = "${DBMasterUsername}"
                                  "DbPassword" = "${DBMasterUserPassword}"
                                  "DbName" = "${DBName}"
                                  "DbPort" = "${DBPort}"
                                  "DbHost" = "${DBHost}"
                                  "ListenHost" = "${ListenHost}"
                                  "ListenPort" = "${ListenPort}"
                                
                     ############ end of vibrato1 
                    
                    ############ start of vibrato2                  
                    vibrato2:
                      commands:
                          01_download_TechTestApp:
                              command: "/home/vibrato/appinstallation.sh > /home/vibrato/appinstallation.out 2>&1"
                              cwd : "/home/vibrato"

                          02_unzip_TechTestApp:
                              command: "unzip TechTestApp* >> /home/vibrato/appinstallation.out 2>&1"
                              cwd: "/home/vibrato"
                          
                          03_move_old_conf.toml:
                              command: "mv /home/vibrato/dist/conf.toml /home/vibrato/dist/conf.toml.org"

                          04_copy_new_conf.toml:
                              command: "cp -p /home/vibrato/conf.toml /home/vibrato/dist/conf.toml"

                          05_start_db_TechTestApp:
                              command: "/home/vibrato/dist/TechTestApp serve > jan_updatedb.out 2>&1"
                              cwd: "/home/vibrato/dist"

                               

                    ############ end of vibrato2 



    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:GetManifest",
                                "ssm:GetParameters",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:PutComplianceItems",
                                "ssm:PutConfigurePackageResult",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation",
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply",
                                "cloudwatch:PutMetricData",
                                "ec2:DescribeInstanceStatus",
                                "ds:CreateComputer",
                                "ds:DescribeDirectories",
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:AbortMultipartUpload",
                                "s3:ListMultipartUploadParts",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

    ECSServiceAutoScalingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    Action:
                    - 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service:
                        - application-autoscaling.amazonaws.com
            Path: /
            Policies:
            - PolicyName: ecs-service-autoscaling
              PolicyDocument:
                  Statement:
                      Effect: Allow
                      Action:
                      - application-autoscaling:*
                      - cloudwatch:DescribeAlarms
                      - cloudwatch:PutMetricAlarm
                      - ecs:DescribeServices
                      - ecs:UpdateService
                      Resource: "*"

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster

    ECSServiceAutoScalingRole:
        Description: A reference to ECS service auto scaling role
        Value: !GetAtt ECSServiceAutoScalingRole.Arn

    ECSAutoScalingGroupName:
        Description: A reference to ECS AutoScaling Group Name
        Value: !Ref ECSAutoScalingGroup
